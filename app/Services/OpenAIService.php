<?php

namespace App\Services;

use OpenAI;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Cache;

class OpenAIService
{
    private $client;
    private $model;
    private $maxTokens;
    private $temperature;

    public function __construct()
    {
        $this->client = OpenAI::client(config('services.openai.api_key'));
        $this->model = config('services.openai.model', 'gpt-4o-mini');
        $this->maxTokens = config('services.openai.max_tokens', 1000);
        $this->temperature = config('services.openai.temperature', 0.7);
    }

    /**
     * Generar respuesta de chat para SmartFood
     */
    public function generateShoppingListResponse(string $userMessage, array $userContext = []): array
    {
        try {
            $systemPrompt = $this->buildSystemPrompt($userContext);
            $cacheKey = $this->generateCacheKey($userMessage, $userContext);

            // Intentar obtener respuesta del cach√©
            $cachedResponse = Cache::get($cacheKey);
            if ($cachedResponse) {
                Log::info('OpenAI: Respuesta obtenida del cach√©', ['cache_key' => $cacheKey]);
                return [
                    'success' => true,
                    'message' => $cachedResponse,
                    'cached' => true,
                    'tokens_used' => 0
                ];
            }

            // Llamada a OpenAI
            $response = $this->client->chat()->create([
                'model' => $this->model,
                'messages' => [
                    [
                        'role' => 'system',
                        'content' => $systemPrompt
                    ],
                    [
                        'role' => 'user',
                        'content' => $userMessage
                    ]
                ],
                'max_tokens' => $this->maxTokens,
                'temperature' => $this->temperature,
            ]);

            $botMessage = $response->choices[0]->message->content;
            $tokensUsed = $response->usage->totalTokens;

            // Guardar en cach√© por 1 hora
            Cache::put($cacheKey, $botMessage, 3600);

            Log::info('OpenAI: Respuesta generada exitosamente', [
                'tokens_used' => $tokensUsed,
                'model' => $this->model
            ]);

            return [
                'success' => true,
                'message' => $botMessage,
                'cached' => false,
                'tokens_used' => $tokensUsed
            ];

        } catch (\Exception $e) {
            Log::error('OpenAI: Error al generar respuesta', [
                'error' => $e->getMessage(),
                'user_message' => $userMessage
            ]);

            return [
                'success' => false,
                'message' => 'Lo siento, no puedo procesar tu solicitud en este momento. Por favor, int√©ntalo de nuevo.',
                'error' => $e->getMessage(),
                'tokens_used' => 0
            ];
        }
    }

    /**
     * Construir prompt del sistema personalizado
     */
    private function buildSystemPrompt(array $userContext): string
    {
        $basePrompt = "Eres SmartFood, un asistente inteligente especializado en crear listas de compra personalizadas.

CONTEXTO DEL USUARIO:";

        if (!empty($userContext['name'])) {
            $basePrompt .= "\n- Nombre: {$userContext['name']}";
        }

        if (!empty($userContext['allergens'])) {
            $allergensList = implode(', ', $userContext['allergens']);
            $basePrompt .= "\n- Al√©rgenos: {$allergensList}";
        }

        if (!empty($userContext['preferences'])) {
            $basePrompt .= "\n- Preferencias: {$userContext['preferences']}";
        }

        $basePrompt .= "\n\nINSTRUCCIONES:
1. Crea listas de compra detalladas y organizadas
2. Respeta SIEMPRE los al√©rgenos del usuario
3. Sugiere productos espec√≠ficos con precios aproximados en euros
4. Organiza por categor√≠as (L√°cteos, Carnes, Verduras, etc.)
5. Incluye cantidades espec√≠ficas
6. Proporciona alternativas cuando sea posible
7. Mant√©n un tono amigable y profesional
8. Si mencionan un presupuesto, aj√∫state a √©l
9. Si mencionan un supermercado espec√≠fico, considera sus productos

FORMATO DE RESPUESTA:
- Usa emojis para hacer la lista m√°s visual
- Estructura clara con categor√≠as
- Incluye el total estimado al final
- M√°ximo 800 caracteres para mantener respuestas concisas

EJEMPLO:
üõí **Lista de Compra Semanal**

ü•õ **L√°cteos**
- Leche desnatada (1L) - 1.20‚Ç¨
- Yogur natural (pack 4) - 2.50‚Ç¨

ü•© **Carnes**
- Pechuga de pollo (500g) - 4.80‚Ç¨

ü•¨ **Verduras**
- Lechuga iceberg - 1.50‚Ç¨
- Tomates (1kg) - 2.20‚Ç¨

üí∞ **Total estimado: 12.20‚Ç¨**";

        return $basePrompt;
    }

    /**
     * Generar clave de cach√© para respuestas similares
     */
    private function generateCacheKey(string $userMessage, array $userContext): string
    {
        $contextString = json_encode($userContext);
        return 'openai_response_' . md5($userMessage . $contextString);
    }

    /**
     * Obtener estad√≠sticas de uso
     */
    public function getUsageStats(): array
    {
        return [
            'total_requests' => Cache::get('openai_total_requests', 0),
            'total_tokens' => Cache::get('openai_total_tokens', 0),
            'cached_responses' => Cache::get('openai_cached_responses', 0),
            'estimated_cost' => $this->calculateEstimatedCost()
        ];
    }

    /**
     * Calcular costo estimado
     */
    private function calculateEstimatedCost(): float
    {
        $totalTokens = Cache::get('openai_total_tokens', 0);

        // Precios GPT-4o-mini (por mill√≥n de tokens)
        $inputCost = 0.40; // $0.40 por mill√≥n
        $outputCost = 1.60; // $1.60 por mill√≥n

        // Estimaci√≥n: 30% input, 70% output
        $inputTokens = $totalTokens * 0.3;
        $outputTokens = $totalTokens * 0.7;

        $cost = ($inputTokens / 1000000 * $inputCost) + ($outputTokens / 1000000 * $outputCost);

        return round($cost, 4);
    }

    /**
     * Incrementar contadores de estad√≠sticas
     */
    public function incrementStats(int $tokensUsed, bool $cached = false): void
    {
        Cache::increment('openai_total_requests');

        if (!$cached) {
            Cache::increment('openai_total_tokens', $tokensUsed);
        } else {
            Cache::increment('openai_cached_responses');
        }
    }
}
